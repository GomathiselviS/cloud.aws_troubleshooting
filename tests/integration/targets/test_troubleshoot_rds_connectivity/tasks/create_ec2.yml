---
- name: Create ec2 instance
  module_defaults:
    group/aws:
      access_key: "{{ aws_access_key | default(omit) }}"
      secret_key: "{{ aws_secret_key | default(omit) }}"
      session_token: "{{ security_token | default(omit) }}"
      region: "{{ aws_region }}"
  block:
    - name: Create a VPC to work in
      amazon.aws.ec2_vpc_net:
        cidr_block: "{{ ec2_vpc_cidr }}"
        name: "{{ ec2_vpc_name }}"
        resource_tags: "{{ resource_tags }}"
      register: vpc

    - name: Define VPC id
      ansible.builtin.set_fact:
        ec2_vpc_id: "{{ vpc.vpc.id }}"

    - name: Create a public subnet
      amazon.aws.ec2_vpc_subnet:
        vpc_id: "{{ ec2_vpc_id }}"
        cidr: "{{ ec2_subnet_cidr }}"
        resource_tags: "{{ resource_tags }}"
      register: subnet

    - name: Define ec2 subnet id
      ansible.builtin.set_fact:
        ec2_subnet_id: "{{ subnet.subnet.id }}"

    - name: Create internet gateway attached to the VPC
      amazon.aws.ec2_vpc_igw:
        vpc_id: "{{ ec2_vpc_id }}"
        state: present
        resource_tags: "{{ resource_tags }}"
      register: internet_gw

    - name: Set variable for internet gateway id
      ansible.builtin.set_fact:
        ec2_internet_gw_id: "{{ internet_gw.gateway_id }}"

    - name: Create Route table for internet gateway
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ ec2_vpc_id }}"
        subnets:
          - "{{ ec2_subnet_id }}"
        routes:
          - dest: "0.0.0.0/0"
            gateway_id: "{{ ec2_internet_gw_id }}"
        lookup: tag
        resource_tags: "{{ resource_tags }}"
        state: present
      register: igw_route_table

    - name: Create security group
      amazon.aws.ec2_security_group:
        name: "{{ ec2_security_group }}"
        vpc_id: "{{ ec2_vpc_id }}"
        description: Security group for Bastion host
        rules:
          - cidr_ip: "0.0.0.0/0"
            proto: tcp
            from_port: 22
            to_port: 22
        rules_egress:
          - cidr_ip: "0.0.0.0/0"
            proto: -1
        tags: "{{ resource_tags }}"
        state: present
      register: secgroup

    - name: Set EC2 Security group id
      ansible.builtin.set_fact:
        ec2_group_id: "{{ secgroup.group_id }}"

    - name: Create key pair to connect to the VM
      amazon.aws.ec2_key:
        name: "{{ ec2_key_name }}"
      register: _key

    - name: Save private key into file
      ansible.builtin.copy:
        content: "{{ _key.key.private_key }}"
        dest: "{{ ansible_test_dir }}/id_rsa"
        mode: "0400"

    - name: Get image ID to create an instance
      amazon.aws.ec2_ami_info:
        filters: "{{ ec2_ami_filter }}"
      register: images

    - name: Create a virtual machine
      amazon.aws.ec2_instance:
        name: "{{ ec2_vm_name }}"
        instance_type: "{{ ec2_instance_type }}"
        image_id: "{{ images.images.0.image_id }}"
        key_name: "{{ ec2_key_name }}"
        subnet_id: "{{ ec2_subnet_id }}"
        network:
          assign_public_ip: true
          groups:
            - "{{ ec2_group_id }}"
        security_groups:
          - "{{ ec2_group_id }}"
        wait: true
        state: started
      register: create_vm

    - name: Set EC2 instance id
      ansible.builtin.set_fact:
        ec2_instance_id: "{{ create_vm.instance_ids.0 }}"

    - name: Add host to inventory
      ansible.builtin.add_host:
        hostname: ec2
        ansible_ssh_user: fedora
        ansible_host: "{{ create_vm.instances.0.public_dns_name }}"
        ansible_python_interpreter: auto
        ansible_ssh_common_args: -o "UserKnownHostsFile=/dev/null" -o StrictHostKeyChecking=no -i {{ ansible_test_dir }}/id_rsa

    - name: Configure EC2 instance
      delegate_to: ec2
      block:
        - name: Update SSH configuration
          ansible.builtin.lineinfile:
            path: /etc/ssh/sshd_config
            regex: "{{ item_config.regex }}"
            line: "{{ item_config.line }}"
          become: true
          loop_control:
            loop_var: item_config
          loop:
            - regex: ^(# *)?ClientAliveInterval
              line: ClientAliveInterval  1200
            - regex: ^(# *)?ClientAliveCountMax
              line: ClientAliveCountMax 3

        - name: Install required packages
          ansible.builtin.yum:
            name:
              - virtualenv
              - python-devel
              - postgresql-devel
              - rpm-build
              - gcc
            state: present
          become: true

        - name: Create virtual environment
          ansible.builtin.pip:
            name:
              - psycopg2
            virtualenv_python: python3.11
            virtualenv: ~/env
